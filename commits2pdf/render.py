from os import path
from textwrap import wrap
from time import time
from datetime import datetime

from cairo import PDFSurface, Context, FONT_SLANT_ITALIC, FONT_SLANT_NORMAL, FONT_WEIGHT_NORMAL, FONT_WEIGHT_BOLD

from .constants import WIDTH, HEIGHT, MARGIN


def make_pdf(commits, output, filename, appearance, **kwargs):
    global ap, generated_on
    ap = appearance
    generated_on = datetime.fromtimestamp(int(time())).strftime('%Y-%m-%d %H:%M:%S')
    
    s = PDFSurface(path.join(output, filename), WIDTH, HEIGHT)
    c = Context(s)
    page = 1
    y = MARGIN  

    draw_bg(c)
    draw_footer(c, page)

    # Title
    draw_title(c, "Commit Report", y)
    y += 30
    draw_rname(c, commits.rname, y)
    y += 40

    for commit in commits.filtered_commits:
        commit_text = get_commit_text(commit)
        commit_height = get_commit_height(*commit_text)
        if y + commit_height + 25 > HEIGHT - MARGIN: # yay magic numbers
            s.show_page()
            page += 1
            y = MARGIN

            draw_bg(c)
            draw_footer(c, page)  
            
        draw_commit(c, commit, y, *commit_text)
        y += commit_height + 50

    s.finish()

def set_font(c, t, font="Arial"):
    if t == "n":
        c.select_font_face(font, FONT_SLANT_NORMAL, FONT_WEIGHT_NORMAL)
    elif t == "b":
        c.select_font_face(font, FONT_SLANT_NORMAL, FONT_WEIGHT_BOLD)
    elif t == "i":
        c.select_font_face(font, FONT_SLANT_ITALIC, FONT_WEIGHT_NORMAL)

def draw_bg(c):
    c.set_source_rgb(*ap["background"])
    c.rectangle(0, 0, WIDTH, HEIGHT)
    c.fill()

def draw_title(c, text, y):
    c.set_source_rgb(*ap["text"]) 
    set_font(c, "b")
    c.set_font_size(24)
    c.move_to(MARGIN, y)
    c.show_text(text)

def draw_rname(c, rname, y):
    c.set_source_rgb(*ap["text"]) 
    set_font(c, "b")
    c.set_font_size(18)
    wrapped_rname = wrap(f"Repository: {rname}", width=(WIDTH - MARGIN * 2) // 8)
    rname_y = y
    for line in wrapped_rname:
        c.move_to(MARGIN, rname_y)
        c.show_text(line)
        rname_y += 15

def get_commit_text(commit):
    info_text = f"{commit['hexsha_short']} | Branch: {commit['branch']} | By {commit['author_name']} ({commit['author_email']}) | At {commit['date'].strftime('%Y-%m-%d')}"
    w_info_text = wrap(info_text , width=(WIDTH - MARGIN * 2) // 6.5)
    
    w_title = wrap(commit["title"], width=(WIDTH - MARGIN * 2) // 8)
    
    description_lines = commit["description"].split("\n")
    w_description = []
    for line in description_lines:
        wrapped_lines = wrap(line, width=(WIDTH - MARGIN * 2) // 5.075)
        w_description.extend(wrapped_lines)
        if len(wrapped_lines) > 1:
            w_description.append('')  

    w_diff_url = wrap(commit["diff_url"], width=(WIDTH - MARGIN * 2) // 5)
    
    return w_info_text, w_title, w_description, w_diff_url

def draw_commit(c, commit, y, *args):
    c.set_source_rgb(*ap["text"]) 

    # Info
    c.set_font_size(11)
    set_font(c, "n", font="Courier New") 
    info_y = y
    for line in args[0]:
        c.move_to(MARGIN, info_y)
        c.show_text(line)
        info_y += 15 

    # Title
    c.set_font_size(16)
    set_font(c, "b")
    title_y = info_y + 15
    for line in args[1]:
        c.move_to(MARGIN, title_y)
        c.show_text(line)
        title_y += 15

    # Description
    c.set_font_size(11)
    set_font(c, "n")  
    description_y = title_y + 15
    for line in args[2]:
        c.move_to(MARGIN, description_y)
        c.show_text(line)
        description_y += 15
            
    # Diff 
    c.set_source_rgb(*ap["diff_link"])   
    c.set_font_size(11)  
    diff_link_y = description_y + 15 if args[2] else title_y + 15
    for i, line in enumerate(args[3]):
        c.move_to(MARGIN, diff_link_y) 
        if i == 0:
            c.show_text(line) 
        else:
            c.show_text(line) 
        diff_link_y += 15
    
    # Horizontal divider
    c.set_source_rgb(*ap["text"])  
    c.set_line_width(1)  
    divider_y = diff_link_y + 12 if args[2] else diff_link_y + 19
    c.move_to(MARGIN, divider_y) 
    c.line_to(WIDTH - MARGIN, divider_y)  
    c.stroke() 

def get_commit_height(*args): 
    total_lines = sum(len(text) for text in args)
    return total_lines * 14 + 50

def draw_footer(c, num):
    c.set_source_rgb(*ap["text"]) 
    set_font(c, "n")
    c.set_font_size(10)
    c.move_to(MARGIN, HEIGHT - MARGIN)
    c.show_text(f"Page {num}")
    set_font(c, "i")
    c.move_to(MARGIN, HEIGHT - MARGIN + 20)
    c.show_text(f"Generated by commits2pdf on {generated_on}")