from fpdf import FPDF
from time import time
from datetime import datetime
from os import path
from copy import deepcopy

TITLE_FONT = ["Arial", "B", 36]
SUBTITLE_FONT = ["Arial", "", 30]
MARGIN_FONT = ["Arial", "I", 8]
SMALL_TEXT_FONT = ["Arial", "", 12]
MEDIUM_TEXT_FONT = ["Arial", "", 16]
MEDIUM_TEXT_FONT_BOLD = ["Arial", "B", 16]
INFO_TEXT_FONT = ["Courier", "", 12]
MARGIN_LR = 25.4
MARGIN_TB = 25.4


class PDF(FPDF):
    def __init__(self, commits, output, filename, appearance):
        super().__init__() # portrait; millimetres; a4
        self.timestamp = datetime.fromtimestamp(int(time())).strftime('%Y-%m-%d %H:%M:%S')
        self._commits, self._output, self._filename, self._ap = commits, output, filename, appearance
        
        self.set_fill_color(0, 0, 0)
        self.set_margins(MARGIN_LR, MARGIN_TB)
        self.set_auto_page_break(auto=False)
        self.add_page()
        self.set_creator("commits2pdf")          
        
        self._title_page()
        self._draw_commits()
        self._write()
    
    def footer(self):
        self.set_y(-1 * (MARGIN_TB / 2))
        self._set_font(*MARGIN_FONT)
        self.set_text_color(0, 0, 0)
        self.cell(1, 0, f"Page {self.page_no()}", 0, 0, "L")
        self.cell(0, 0, f"Generated by commits2pdf at {self.timestamp}", 0, 0, "C")
    
    def _make_page_bg(self):
        self.rect(0, 0, self.w, self.h, "F")
    
    def _write(self):
        self.output(f"{path.join(self._output, self._filename)}", "F")
    
    def _set_font(self, *args):
        self.set_font(args[0], args[1], args[2])
    
    def _draw_commits(self):
        self.add_page()
        for commit in self._commits.filtered_commits:
            if (result := self._draw_commit(commit, pre_vis=True)) == "new":
                self.add_page()
                self._draw_commit(commit)
            elif result == "no_divider":
                self._draw_commit(commit, no_divider=True)
            else:
                self._draw_commit(commit)
                
    def _draw_commit(self, commit, pre_vis=False, no_divider=False):
            p = self if not pre_vis else deepcopy(self)

            y = p.get_y()
            p.set_text_color(0, 0, 0)
            p._set_font(*INFO_TEXT_FONT)
            p.multi_cell(w=0, h=p.font_size * 1.25, align="C",
                            txt=f"{commit['hexsha_short']} | Branch: {commit['branch']} | By {commit['author_name']} ({commit['author_email']}) | At {commit['date'].strftime('%Y-%m-%d')}")
            p.ln(p.font_size * 0.75)
            if pre_vis and p.get_y() > p.h: return "new"
            
            p._set_font(*MEDIUM_TEXT_FONT_BOLD)
            p.multi_cell(w=0, h=p.font_size * 1.25, align="L", txt=commit["title"])
            p.ln(-1 * p.font_size * 0.5)
            if pre_vis and p.get_y() > p.h: return "new"

            p._set_font(*SMALL_TEXT_FONT)
            p.multi_cell(w=0, h=p.font_size * 1.5, align="L", txt=commit["description"])
            p.ln()
            if pre_vis and p.get_y() > p.h: return "new" 

            p._set_font(*SMALL_TEXT_FONT)
            p.set_text_color(0, 0, 255)
            p.write(p.font_size * 1.5, "View diff on GitHub", commit["diff_url"])
            p.ln(p.font_size * 4.75) 
            if pre_vis and p.get_y() > p.h: return "new" 

            if pre_vis or not no_divider:
                div_y = p.get_y() - p.font_size * 3.25 / 2
                p.line(p.l_margin, div_y, p.w - p.r_margin, div_y)
                if pre_vis and p.get_y() > p.h * 0.97: return "no_divider" 


    def _title_page(self):
        self._set_font(*TITLE_FONT)
        self.set_text_color(0, 0, 0)
        self.cell(w=0, h=self.font_size * 1.5, txt="Commits Report", align="C")
        self.ln()
        
        self._set_font(*SUBTITLE_FONT)
        self.cell(w=0, h=self.font_size * 3, txt="<repo_name>", align="C")
        self.ln()
        
        self._set_font(*MEDIUM_TEXT_FONT)
        self.multi_cell(0, self.font_size * 1.5, txt="Owner: ", align="C")
        self.ln()
        self.multi_cell(0, self.font_size * 1.5, txt="Authors: ", align="C")
        self.ln()
        self.multi_cell(0, self.font_size * 1.5, txt="Start date: | End date: ", align="C")
        self.ln()
        self.multi_cell(0, self.font_size * 1.5, txt="Newest N Commits: | Oldest N Commits: ", align="C")
        self.ln()
        self.multi_cell(0, self.font_size * 1.5, txt="AND Queries: ", align="C")
        self.ln()
        self.multi_cell(0, self.font_size * 1.5, txt="OR Queries: ", align="C")
        self.ln()
        self.multi_cell(0, self.font_size * 1.5, txt="Sorting: <o-n or n-o>", align="C")
        self.ln()